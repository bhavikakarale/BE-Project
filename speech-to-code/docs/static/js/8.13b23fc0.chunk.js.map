{"version":3,"sources":["pages/about/index.tsx","pages/@components/header/index.tsx"],"names":["React","memo","props","Fragment","className","href","Header","parseRoute","root","lang","route","makeUrl","path","process","isSelected","page","stt","localStorage","getItem","changeStt","val","evt","preventDefault","setItem","window","location","reload","id","src","alt","height","title","i18n","rel","target","onClick","data-tip","data-for","multiline","effect"],"mappings":"+HAAA,mDAIeA,cAAMC,MAAK,SAAgBC,GACtC,OACI,eAAC,IAAMC,SAAP,WACI,cAAC,IAAD,IACA,uBAAMC,UAAU,QAAhB,UACI,sBAAKA,UAAU,aAAf,UACI,uCAGA,0DAEJ,2IAC8G,uBAD9G,6GAE8G,uBAF9G,oEAIA,0IAE0B,uBAF1B,kFAIA,sBAAKA,UAAU,aAAf,UACI,2CAGA,kDAEJ,+BACI,6BACI,mBAAGC,KAAK,2DAAR,6CAIJ,6BACI,mBAAGA,KAAK,mDAAR,sBAEJ,6BACI,mBAAGA,KAAK,0FAAR,gCAEJ,6BACI,mBAAGA,KAAK,+KAAR,oCAIJ,6BACI,mBAAGA,KAAK,yEAAR,kD,sDC/CxB,yEAMe,SAASC,EAAOJ,GAAa,IAAD,EACTK,cAAtBC,EAD+B,EAC/BA,KAAMC,EADyB,EACzBA,KAAMC,EADmB,EACnBA,MACdC,EAAU,SAACC,GAAD,gBAAqBC,kBAArB,YAA+CL,GAA/C,OAAwDA,EAAY,IAAL,IAA/D,OAA2EI,IACrFE,EAAa,SAACC,GAAD,OAAkBL,IAAUK,EAAO,WAAa,IAC7DC,EAAMC,aAAaC,QAAQ,QAAU,QAErCC,EAAY,SAACC,EAAaC,GAK5B,OAJAA,EAAIC,iBAEJL,aAAaM,QAAQ,MAAOH,GAErBI,OAAOC,SAASC,UAG3B,OACI,sBAAKC,GAAG,UAAR,UACI,iCACI,qBACIC,IAAG,UAAKf,kBAAL,oBACHgB,IAAI,OACJC,OAAO,KACPC,MAAM,iBAGd,mBAAG1B,KAAMM,EAAQ,IAAKP,UAAWU,EAAW,QAA5C,SACKkB,EAAKvB,GAAL,OAEL,mBAAGJ,KAAMM,EAAQ,WAAYP,UAAWU,EAAW,UAAnD,kBAGA,mBACImB,IAAI,aACJ5B,KACI,iJAGJ6B,OAAO,SANX,SAQKF,EAAKvB,GAAL,UAEL,mBAAGJ,KAAMM,EAAQ,UAAWP,UAAWU,EAAW,SAAlD,SACKkB,EAAKvB,GAAL,QAEL,sBAAKL,UAAU,WAAf,UACI,mBAAGC,KAAMQ,6BAAwCT,UAAoB,UAATK,EAAA,WAAgC,GAA5F,mBADJ,YAEI,mBAAGJ,KAAMQ,6BAAwCT,UAAoB,UAATK,EAAA,WAAgC,GAA5F,sBAEJ,sBAAKL,UAAU,SAAf,UACI,mBACIC,KAAK,IACLD,UAAmB,UAARY,EAAA,WAA+B,GAC1CmB,QAAS,SAACd,GAAD,OAASF,EAAU,QAASE,IAHzC,mBADJ,YASI,mBACIhB,KAAK,IACLD,UAAmB,WAARY,EAAA,WAAgC,GAC3CmB,QAAS,SAACd,GAAD,OAASF,EAAU,SAAUE,IAH1C,oBAOA,sBAAMjB,UAAU,OAAOgC,WAAUJ,EAAKvB,GAAL,KAAoB4B,WAAS,SAA9D,SACI,mBAAGjC,UAAU,+BAGrB,cAAC,IAAD,CAAckC,WAAS,EAACC,OAAO,QAAQnC,UAAU,gCAAgCuB,GAAG,cAKhG,IAAMK,EAA4B,CAC9B,QAAS,CACL,KAAO,oZAIP,KAAQ,OACR,MAAS,QACT,QAAW,WAEf,QAAS,CACL,KAAO,0bAIP,KAAQ,YACR,MAAS,QACT,QAAW,Y","file":"static/js/8.13b23fc0.chunk.js","sourcesContent":["import React from 'react'\r\nimport Nav from '../@components/header'\r\nimport './style.scss'\r\n\r\nexport default React.memo(function Webapp(props: { lang: string }) {\r\n    return (\r\n        <React.Fragment>\r\n            <Nav />\r\n            <main className=\"about\">\r\n                <div className=\"main-title\">\r\n                    <h1>\r\n                        About\r\n                    </h1>\r\n                    <div>What is this website</div>\r\n                </div>\r\n                <p>\r\n                    Speech2Code is an desktop application that let's you control your favorite IDE using just voice commands, <br/>\r\n                    that means you can write programs using just your voice, without typing on the keyboard. It was developed <br/> as part of my undergraduate dissertation in Computer Science.\r\n                </p>\r\n                <p>\r\n                    This demo website allows you test Speech2Code in the browser without installing it\r\n                    on your local machine.<br />This is possible because this entire application is developed in JavaScript.\r\n                </p>\r\n                <div className=\"main-title\">\r\n                    <h3>\r\n                        Resources\r\n                    </h3>\r\n                    <div>Useful links</div>\r\n                </div>\r\n                <ul>\r\n                    <li>\r\n                        <a href=\"https://github.com/pedrooaugusto/speech-to-code/releases\">\r\n                            Download Speech2Code binaries\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://github.com/pedrooaugusto/speech-to-code/\">Github</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://github.com/pedrooaugusto/speech-to-code/tree/main/spoken/src/modules/typescript\">List of commands</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://pedrooaugusto.github.io/Programming%20With%20Voice%20-%20Assistive%20Technology%20Tool%20For%20Programming%20In%20JavaScript%20Using%20Voice%20-%20Pedro%20Silva.pdf\">\r\n                            Dissertation (pt-br)\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://www.figma.com/file/glanqRtfVtW2Va1wybr5pkCh/TCC?node-id=18%3A2\">\r\n                            Application UI Design\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n\r\n            </main>\r\n        </React.Fragment>\r\n    )\r\n})\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport ReactTooltip from 'react-tooltip'\r\nimport { parseRoute } from '../utils'\r\nimport './style.scss'\r\n\r\nexport default function Header(props: any) {\r\n    const { root, lang, route } = parseRoute()\r\n    const makeUrl = (path: string) => `${process.env.PUBLIC_URL}/${root}${ !root ? '' : '/' }${path}`\r\n    const isSelected = (page: string) => route === page ? 'selected' : '' \r\n    const stt = localStorage.getItem('STT') || 'azure'\r\n\r\n    const changeStt = (val: string, evt: React.MouseEvent) => {\r\n        evt.preventDefault()\r\n\r\n        localStorage.setItem('STT', val)\r\n\r\n        return window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <nav id=\"top-nav\">\r\n            <figure>\r\n                <img\r\n                    src={`${process.env.PUBLIC_URL}/logo-purple.png`}\r\n                    alt=\"logo\"\r\n                    height=\"40\"\r\n                    title=\"Brand logo\"\r\n                />\r\n            </figure>\r\n            <a href={makeUrl('')} className={isSelected('home')}>\r\n                {i18n[lang]['Home']}\r\n            </a>\r\n            <a href={makeUrl('webapp/')} className={isSelected('webapp')}>\r\n                Demo\r\n            </a>\r\n            <a\r\n                rel=\"noreferrer\"\r\n                href={\r\n                    \"https://pedrooaugusto.github.io/Programming With Voice - Assistive Technology Tool \" +\r\n                    \"For Programming In JavaScript Using Voice - Pedro Silva.pdf\"\r\n                }\r\n                target=\"_blank\"\r\n            >\r\n                {i18n[lang]['Article']}\r\n            </a>\r\n            <a href={makeUrl('about/')} className={isSelected('about')}>\r\n                {i18n[lang]['About']}    \r\n            </a>\r\n            <div className=\"language\">\r\n                <a href={process.env.PUBLIC_URL + \"/en/webapp/\"} className={lang === 'en-US' ? `selected` : ''}>en-US</a>&nbsp;/&nbsp;\r\n                <a href={process.env.PUBLIC_URL + \"/pt/webapp/\"} className={lang === 'pt-BR' ? `selected` : ''}>pt-BR</a>\r\n            </div>\r\n            <div className=\"config\">\r\n                <a\r\n                    href=\"#\"\r\n                    className={stt === 'azure' ? `selected` : ''}\r\n                    onClick={(evt) => changeStt('azure', evt)}\r\n                >\r\n                    Azure\r\n                </a>\r\n                &nbsp;/&nbsp;\r\n                <a\r\n                    href=\"#\"\r\n                    className={stt === 'chrome' ? `selected` : ''}\r\n                    onClick={(evt) => changeStt('chrome', evt)}\r\n                >\r\n                    Chrome\r\n                </a>\r\n                <span className=\"help\" data-tip={i18n[lang]['help']} data-for=\"header\">\r\n                    <i className=\"fa fa-question-circle\" />\r\n                </span>\r\n            </div>\r\n            <ReactTooltip multiline effect=\"solid\" className=\"custom-tooltip tooltip-header\" id=\"header\" />\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst i18n: Record<string, any> = {\r\n    'en-US': {\r\n        'help': `Which Speech to Text provider should be used ?<br/>\r\n                Azure is the default option, but since it is a paid service it may not be available all the time.<br/>\r\n                Chrome is the native Speech to Text provider of your browser, it's a free service and was\r\n                tested on Google Chrome and MS Edge (it may work on any browser that supports the SpeechRecognition API).`,\r\n        'Home': 'Home',\r\n        'About': 'About',\r\n        'Article': 'Article'\r\n    },\r\n    'pt-BR': {\r\n        'help': `Qual o provedor de Speech to Text deve ser usado ?<br/>\r\n        Azure é a opção padrão, por se tratar de um serviço pago, pode não estar disponível a todo momento.<br/>\r\n        Chrome é o serviço nativo de conversão de fala em texto do seu navegador, é um serviço grátis e funciona\r\n            no Google Chrome e no MS Edge (pode funcionar em qualquer browser que suporte a SpeechRecognition API).`,\r\n        'Home': 'Início',\r\n        'About': 'Sobre',\r\n        'Article': 'Artigo'\r\n    }\r\n}\r\n"],"sourceRoot":""}