{"normalizers":{"ordinalNumber":"function ordinalNumber(lang) {\r\n        function OrdinalNumbers(last, tenFirstNumbers) {\r\n            return (word, compareStr) => {\r\n                if (compareStr(word, last)) return '-1'\r\n                if (!Number.isNaN(parseInt(word, 10)))\r\n                    return parseInt(word, 10).toString()\r\n\r\n                const i = tenFirstNumbers.findIndex((a) => compareStr(a, word))\r\n\r\n                return i === -1 ? undefined : (i + 1).toString()\r\n            }\r\n        }\r\n\r\n        if (lang === 'pt-BR')\r\n            return OrdinalNumbers('último', [\r\n                'primeiro',\r\n                'segundo',\r\n                'terceiro',\r\n                'quarto',\r\n                'quinto',\r\n                'sexto',\r\n                'sétimo',\r\n                'oitavo',\r\n                'nono',\r\n                'décimo',\r\n            ])\r\n\r\n        return OrdinalNumbers('last', [\r\n            'first',\r\n            'second',\r\n            'third',\r\n            'fourth',\r\n            'fifth',\r\n            'sixth',\r\n            'seventh',\r\n            'eighth',\r\n            'ninth',\r\n            'tenth',\r\n        ])\r\n    }","boolean":"function boolean(lang) {\r\n        return function(word, compareStr) {\r\n            return word != undefined ? true : false\r\n        }\r\n    }","identity":"function identity(lang) {\r\n        return function(word, compareStr) {\r\n            return word\r\n        }\r\n    }","number":"function number(lang) {\r\n        return function(word, compareStr) {\r\n            const numbers = {\r\n                'pt-BR': ['zero', 'um', 'dois', 'três', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove', 'dez'],\r\n                'en-US': ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']\r\n            }\r\n\r\n            if (!isNaN(parseInt(word))) return parseInt(word).toString()\r\n\r\n            const val = numbers[lang].indexOf(word)\r\n\r\n            if (val !== -1) return val.toString()\r\n\r\n            // for some reason this is valid #42\r\n            if (/^(#\\d+)$/.test(word)) return word.substr(1)\r\n\r\n            return undefined\r\n        }\r\n    }","elementarMathOperation":"function elementarMathOperation(lang) {\r\n        const enUS = [['plus', '+'], ['times', '*'], ['minus', '-'], ['divided', '/']];\r\n        const ptBR = [['mais', '+'], ['vezes', '*'], ['menos', '-'], ['dividido', '/']];\r\n        const langs = {\r\n            'en-US': enUS,\r\n            'pt-BR': ptBR\r\n        };\r\n        return (word, compareStr) => {\r\n            const op = langs[lang].find(([name]) => compareStr(name, word)) || [];\r\n            return op[1];\r\n        };\r\n    }"},"templates":{"{any}":{"value":"(.*)","examples":{"pt-BR":["quem é você","isto é um teste"],"en-US":["who are you","the universe is cracked"]}},"{term}":{"value":"^(?![\\* ]$).*","examples":{"pt-BR":["valor","lista","numero","texto","temp","a"],"en-US":["value","graph","number","text","temp","a"]}},"{ordinalNumber}":{"value":"(\\S+)","examples":{"pt-BR":["1ª","42ª","último","primeiro","sétimo"],"en-US":["1ª","42ª","last","first","fourth"]}},"{numeral}":{"value":"(\\d+)","examples":{"pt-BR":["1","42"],"en-US":["1","42"]}},"{number}":{"value":"^(?![\\* ]$).*","examples":{"pt-BR":["1","42"],"en-US":["1","42"]},"defaultNormalizer":"number"},"{char}":{"value":"(.)","examples":{"pt-BR":["a","B","A","z"],"en-US":["g","K","M"]}},"@anything":{"value":"","examples":{"pt-BR":["gap"],"en-US":["gap"]}}},"stopWords":{"en-US":{"words":["a -> P1 != (letter|symbol|word)","the","with","you","can","please","from -> S != (to)","to -> S != (from)","of","it","its","it's","is","are","was","were","in"],"expressions":[]},"pt-BR":{"words":["a -> P1 != (letra|símbolo|palavra)","o -> P1 != (letra|símbolo|palavra)","ao","você","com","pode","na","do -> S != (até)","de -> S != (até)","da -> S != (até)","dos","das","as","os","para -> S != (todo)","é","era","estava","como","uma","vá"],"expressions":["por favor"]}},"modules":[{"id":"typescript","grammar":{"en-US":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(conditional)"}},{"v":"1","w":"2","value":{"label":"(statement)"}},{"v":"2","w":"3","value":{"label":"(if)"}},{"v":"3","w":"4","value":{"label":"(else)","store":"otherwise","normalizer":"boolean"}},{"v":"2","w":"5","value":{"label":"([expressions])","store":"condition"}},{"v":"3","w":"5","value":{"label":"([expressions])","store":"condition"}},{"v":"4","w":"5","value":{"label":"([expressions])","store":"condition"}}],"value":{"id":"condition","label":"Condition Statement","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Creates a if/else statement","desc":"Creates a if/else statement with the provided expression as condition","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function Condition(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"Condition.\"');\r\n    const anything = context.templates['@anything'].examples[(_a = command === null || command === void 0 ? void 0 : command.extra) === null || _a === void 0 ? void 0 : _a.lang][0];\r\n    let { condition = anything, otherwise = false } = command;\r\n    condition = typeof condition === 'string' ? condition : condition === null || condition === void 0 ? void 0 : condition.value;\r\n    let text = `if(${condition}) {\\n\\n}${otherwise ? ' else {\\n\\n}' : ''}`;\r\n    const line = await editor.getLine();\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    await editor.goToLine(line._line + 1);\r\n    if (condition.includes(anything)) {\r\n        const pos = await editor.findPositionOf(anything);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexports.default = Condition;\r\n","phrases":["conditional statement","conditional statement if else","conditional statement if else [expressions]","conditional statement if [expressions]","conditional statement [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg3"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg3","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, pointer)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(symbol, letter)"}},{"v":"7","w":"5","value":{"label":"(symbol, letter)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalizer":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({char})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(begin, end)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(line)"}},{"v":"1","w":"11","value":{"label":"(next)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(symbol)"}},{"v":"13","w":"12","value":{"label":"(symbol)"}}],"value":{"id":"cursor","label":"Move cursor","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Move cursor","desc":"Moves the cursor to a different line or token","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function cursor(args, editor, context) {\r\n    console.log('[Spoken]: Executing: \"cursor.\"');\r\n    if (args.linePosition != null) {\r\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\r\n        return await editor.moveCursorTo(pos);\r\n    }\r\n    else if (args.line) {\r\n        return await editor.goToLine(args.line);\r\n    }\r\n    else if (!args.symbol) {\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo(null, undefined, nth);\r\n    }\r\n    else {\r\n        if (args.leapSize == undefined)\r\n            args.leapSize = '1';\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\r\n    }\r\n    return await editor.moveCursorTo('BEGIN_LINE');\r\n}\r\nvar LinePostionEnum;\r\n(function (LinePostionEnum) {\r\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\r\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\r\n})(LinePostionEnum || (LinePostionEnum = {}));\r\nexports.default = cursor;\r\n","phrases":["pointer line 1","cursor letter M","cursor last symbol M","cursor end line","cursor next symbol","pointer next 1 symbol"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(expression)"}},{"v":"1","w":"2","value":{"label":"([expressions])","store":"left"}},{"v":"2","w":"3","value":{"label":"([math_operator], [logical_operator])","store":"operation"}},{"v":"4","w":"3","value":{"label":"([math_operator], [logical_operator])","store":"operation"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"right"}}],"value":{"id":"elementar_math_op","label":"Elementar Math Operation","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Writes a elementar math operation","desc":"Writes a elementar math operation (*, -, +, /)","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function WriteElementarMathOperation(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteElementarMathOperation\"');\r\n    let operation = toArray(command.operation);\r\n    let right = toArray(command.right);\r\n    let text = toValue(command.left);\r\n    for (let i = 0; i < right.length; i++) {\r\n        if (operation[i].isNegative) {\r\n            if (operation[i].operator === '===')\r\n                text += ' !== ' + toValue(right[i]);\r\n            else\r\n                text = '!(' + text + ' ' + operation[i].operator + ' ' + toValue(right[i]) + ')';\r\n        }\r\n        else {\r\n            text += ' ' + operation[i].operator + ' ' + toValue(right[i]);\r\n        }\r\n    }\r\n    if (command.parent)\r\n        return text;\r\n    await editor.write(text);\r\n    const wildcard = [command.left, ...right].find(item => typeof item !== 'string');\r\n    if (wildcard) {\r\n        const pos = await editor.findPositionOf(wildcard.value);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nconst toArray = (arg) => Array.isArray(arg) ? arg : [arg];\r\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\r\nexports.default = WriteElementarMathOperation;\r\n","phrases":["expression [expressions] [math_operator] [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"([number], [string], [variable_reference], [elementar_math_op], [function_call])","store":"expression"}},{"v":"0","w":"2","value":{"label":"(gap)","store":"wildCard","normalizer":"identity"}},{"v":"0","w":"3","value":{"label":"(false, true)","store":"booleanConstants"}}],"value":{"id":"expressions","label":"Writes a expression","lang":"en-US","langName":"English","pad":"0.2","nodesep":"1","ranksep":"2","rankdir":"LR","alias":"true","title":"Writes a expression","desc":"Writes a expression in the editor, this is meant to be used inside another automatas","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function Expression(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"Expression\"');\r\n    let { expression, parent, wildCard, booleanConstants } = command;\r\n    // really ??? (fix later)\r\n    if (booleanConstants != null)\r\n        expression = booleanConstants == 1 ? 'true' : 'false';\r\n    if (parent) {\r\n        return expression ? expression : { value: wildCard, isWildCard: true };\r\n    }\r\n    return await editor.write(expression || wildCard);\r\n}\r\nexports.default = Expression;\r\n","phrases":["[elementar_math_op]","gap","true"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(call, execute)"}},{"v":"1","w":"2","value":{"label":"(function)"}},{"v":"2","w":"3","value":{"label":"([multi_word_token])","store":"functionName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"3","w":"4","value":{"label":"(λ)"}},{"v":"2","w":"4","value":{"label":"({term})","store":"functionName"}},{"v":"4","w":"11","value":{"label":"(of, on, at)","disableSpellcheck":"true"}},{"v":"4","w":"5","value":{"label":"([expressions])","store":"caller"}},{"v":"11","w":"5","value":{"label":"([expressions])","store":"caller"}},{"v":"4","w":"6","value":{"label":"(arguments)"}},{"v":"5","w":"6","value":{"label":"(arguments)"}},{"v":"6","w":"7","value":{"label":"([expressions])","store":"args"}},{"v":"7","w":"8","value":{"label":"(and)"}},{"v":"8","w":"7","value":{"label":"([expressions])","store":"args"}},{"v":"4","w":"9","value":{"label":"({number})","store":"argsNumber"}},{"v":"5","w":"9","value":{"label":"({number})","store":"argsNumber"}},{"v":"9","w":"10","value":{"label":"(arguments)"}}],"value":{"id":"function_call","label":"Calls a function","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","priority":"2","title":"Calls a function","desc":"Calls a function with the specified arguments in the desired caller","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function FunctionCall(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"FunctionCall\"');\r\n    const anything = context.templates['@anything'].examples[(_a = command === null || command === void 0 ? void 0 : command.extra) === null || _a === void 0 ? void 0 : _a.lang];\r\n    const functionName = join(command.functionName);\r\n    const argsNumber = command.argsNumber ? parseInt(command.argsNumber, 10) : command.oneArg ? 1 : NaN;\r\n    const args = command.args ? toArray(command.args) : [];\r\n    const caller = command.caller ? toValue(command.caller) : null;\r\n    let text = functionName + '(';\r\n    if (argsNumber) {\r\n        text += new Array(argsNumber).fill(anything).join(', ');\r\n    }\r\n    else if (args.length) {\r\n        text += (args.map(item => typeof item === 'string' ? item : anything).join(', '));\r\n    }\r\n    text += ')';\r\n    if (caller)\r\n        text = caller + '.' + text;\r\n    if (command.parent)\r\n        return text;\r\n    const line = await editor.getLine();\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    if (argsNumber > 0) {\r\n        const pos = await editor.findPositionOf(anything[0]);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nconst toArray = (arg) => Array.isArray(arg) ? arg : [arg];\r\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\r\nconst join = (item) => typeof item === 'string' ? item : item.join('');\r\nexports.default = FunctionCall;\r\n","phrases":["execute function [multi_word_token]","execute function text","call function [multi_word_token] [expressions]","call function [multi_word_token] at [expressions]","call function temp [expressions]","call function a on [expressions]","execute function [multi_word_token] [expressions] arguments [expressions]","call function [multi_word_token] arguments [expressions]","execute function [multi_word_token] of [expressions] arguments [expressions]","call function temp [expressions] arguments [expressions]","call function temp arguments [expressions]","call function value of [expressions] arguments [expressions]","execute function [multi_word_token] [expressions] 1 arguments","call function [multi_word_token] 1 arguments","call function [multi_word_token] of [expressions] 1 arguments","call function value [expressions] 42 arguments"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new, create, declare)"}},{"v":"1","w":"2","value":{"label":"(function)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"fnName"}},{"v":"3","w":"4","value":{"label":"({number})","store":"argsNumber"}},{"v":"4","w":"5","value":{"label":"(arguments)"}},{"v":"3","w":"6","value":{"label":"(return, returning)"}},{"v":"5","w":"6","value":{"label":"(return, returning)"}},{"v":"0","w":"6","value":{"label":"(return)","store":"returnOnly"}},{"v":"6","w":"7","value":{"label":"([expressions])","store":"returnValue"}}],"value":{"id":"function_declaration","label":"Creates a function","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","priority":"2","title":"Creates a function","desc":"Creates a function with the desired number of args and return value","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function FunctionDeclaration(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"FunctionDeclaration\"');\r\n    const anything = context.templates['@anything'].examples[(_a = command === null || command === void 0 ? void 0 : command.extra) === null || _a === void 0 ? void 0 : _a.lang];\r\n    let { fnName, argsNumber, returnValue, returnOnly } = command;\r\n    argsNumber = argsNumber != null ? parseInt(argsNumber, 10) : 0;\r\n    let text = '';\r\n    if (returnOnly == undefined) {\r\n        text = `function ${fnName}(`;\r\n        if (argsNumber > 0) {\r\n            text += new Array(argsNumber).fill(anything).join(', ');\r\n        }\r\n        text += ') {\\n';\r\n        if (returnValue != null) {\r\n            text += 'return ' + toValue(returnValue);\r\n        }\r\n        text += '\\n}';\r\n    }\r\n    else {\r\n        text = 'return ' + toValue(returnValue);\r\n    }\r\n    if (command.parent)\r\n        return text;\r\n    const line = await editor.getLine();\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    const r = await editor.goToLine(line._line + 1);\r\n    if (argsNumber > 0) {\r\n        const pos = await editor.findPositionOf(anything[0]);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return r;\r\n}\r\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\r\nexports.default = FunctionDeclaration;\r\n","phrases":["declare function graph","new function temp 1 arguments","declare function number 42 arguments returning [expressions]","new function a return [expressions]","return [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(go)"}},{"v":"1","w":"2","value":{"label":"(to)"}},{"v":"0","w":"3","value":{"label":"(line)"}},{"v":"1","w":"3","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(line)"}},{"v":"3","w":"5","value":{"label":"(number)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}},{"v":"5","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Change line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Change line","desc":"Moves the cursor to a different line","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function goToLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"goToLine.\"');\r\n    return await editor.goToLine(command.line);\r\n}\r\nexports.default = goToLine;\r\n","phrases":["go to line 42","go to line number 42","go line 1","go line number 1","line 42","line number 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg21"},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"},"parent":"sg21"},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"sg21","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(and, or, equals)","store":"logicalOperator"}},{"v":"2","w":"1","value":{"label":"(and, or, equals)","store":"logicalOperator"}},{"v":"0","w":"2","value":{"label":"(not, negative)","store":"isNegative","normalizer":"boolean"}},{"v":"0","w":"3","value":{"label":"(less, greater)","store":"inequalityOperator"}},{"v":"2","w":"3","value":{"label":"(less, greater)","store":"inequalityOperator"}},{"v":"3","w":"4","value":{"label":"(or, λ)"}},{"v":"4","w":"5","value":{"label":"(equals)","store":"orEqual","normalizer":"boolean"}},{"v":"3","w":"7","value":{"label":"(than)"}},{"v":"5","w":"7","value":{"label":"(than)"}}],"value":{"id":"logical_operator","label":"Writes a logical operator","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","alias":"true","title":"Writes a logical operator","desc":"Writes a logical operator (===, !==, &&, ||, >, <, >=, <=) meant to be used inside expressions","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function LogicalOperator(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"LogicalOperator\"');\r\n    const { logicalOperator, isNegative = false, inequalityOperator, orEqual = false } = command;\r\n    if (logicalOperator !== undefined) {\r\n        const operator = ['&&', '||', '==='][logicalOperator];\r\n        return { operator, isNegative };\r\n    }\r\n    else if (inequalityOperator !== undefined) {\r\n        const operator = ['<', '>'][inequalityOperator] + (orEqual ? '=' : '');\r\n        return { operator, isNegative };\r\n    }\r\n    return { operator: 'error', isNegative: false };\r\n}\r\nexports.default = LogicalOperator;\r\n","phrases":["or","negative or","not less or equals than","not less than","less or equals than","greater than"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(plus, times, minus, divided, module)","store":"mathOperator"}},{"v":"1","w":"1","value":{"label":"(by)"}}],"value":{"id":"math_operator","label":"Writes a math operator","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","alias":"true","title":"Writes a math operator","desc":"Writes a math operator (*, -, +, /, %) meant to be used inside expressions","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function MathOperator(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"MathOperator\"');\r\n    const { mathOperator } = command;\r\n    const operator = ['+', '*', '-', '/', '%'][mathOperator] || 'error';\r\n    return { operator };\r\n}\r\n// @ts-ignore\r\nexports.default = MathOperator;\r\n","phrases":["minus by"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"3","value":{"label":"(*)"}},{"v":"3","w":"3","value":{"label":"({any})","store":"words"}},{"v":"3","w":"4","value":{"label":"(*)"}}],"value":{"id":"multi_word_token","label":"Group multiple words together","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Group multiple words together","desc":"Group multiple words together in one variable meant to be used as alias in other commands","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function MultiWordTokens(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"MultiWordTokens\"');\r\n    function camelCase(words) {\r\n        return words.map((a, i) => i ? a.charAt(0).toUpperCase() + a.slice(1) : a);\r\n    }\r\n    if (((_a = command.extra) === null || _a === void 0 ? void 0 : _a.case) === 'camel') {\r\n        return camelCase(command.words);\r\n    }\r\n    return command.words;\r\n}\r\nexports.default = MultiWordTokens;\r\n","phrases":["* *"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg26"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg28"},{"v":"5","value":{"shape":"circle"},"parent":"sg26"},{"v":"sg26","value":{"shape":"circle"}},{"v":"sg28","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new)"}},{"v":"5","w":"1","value":{"label":"(new)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"5","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"4","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"0","w":"4","value":{"label":"(line)"}},{"v":"0","w":"5","value":{"label":"(create)"}},{"v":"5","w":"5","value":{"label":"(a)"}}],"value":{"id":"new_line","label":"New line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"New line","desc":"Creates a new line above or below the current line","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function newLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"new line.\"');\r\n    return await editor.newLine(command.position);\r\n}\r\nexports.default = newLine;\r\n","phrases":["new line","create new line","create line","new line below","line above","create new line below","create line below"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(number)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"number"}},{"v":"0","w":"3","value":{"label":"({number})","store":"number"}}],"value":{"id":"number","label":"Writes a number","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","priority":"2","title":"Writes a number","desc":"Writes a number in the editor","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function WriteNumber(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteNumber\"');\r\n    const { number, parent } = command;\r\n    if (parent)\r\n        return number;\r\n    return await editor.write(number);\r\n}\r\nexports.default = WriteNumber;\r\n","phrases":["number 1","1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(remove)"}},{"v":"1","w":"2","value":{"label":"(line)","store":"isLine","normalizer":"boolean"}},{"v":"1","w":"3","value":{"label":"(selection)","store":"isSelection","normalizer":"boolean"}}],"value":{"id":"remove_ln_sec","label":"Remove","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Remove","desc":"Removes the current line or the current selection","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function remove(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"remove line/selection.\"');\r\n    if (command.isLine) {\r\n        const line = await editor.getLine();\r\n        if (line instanceof Error)\r\n            throw line;\r\n        return await editor.remove(line.lineNumber);\r\n    }\r\n    else {\r\n        return await editor.write('');\r\n    }\r\n}\r\nexports.default = remove;\r\n","phrases":["remove line","remove selection"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"doublecircle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"circle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"}},{"v":"13","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(repetition)"}},{"v":"1","w":"2","value":{"label":"(statement)"}},{"v":"2","w":"9","value":{"label":"(for)"}},{"v":"9","w":"10","value":{"label":"(every)"}},{"v":"10","w":"11","value":{"label":"({term})","store":"item"}},{"v":"11","w":"12","value":{"label":"(of, λ)"}},{"v":"12","w":"13","value":{"label":"([expressions])","store":"collection"}},{"v":"2","w":"3","value":{"label":"(from)"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"from"}},{"v":"4","w":"5","value":{"label":"(to)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"to"}},{"v":"6","w":"7","value":{"label":"(step)"}},{"v":"7","w":"8","value":{"label":"([expressions])","store":"step"}}],"value":{"id":"repetition","label":"Repetition Statement","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Creates a for loop statement","desc":"Creates a for loop statement with the provided expressions as parameters","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function Repetition(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"Repetition.\"');\r\n    const gap = context.templates['@anything'].examples[(_a = command === null || command === void 0 ? void 0 : command.extra) === null || _a === void 0 ? void 0 : _a.lang][0];\r\n    let text = `for(${gap}; ${gap}; ${gap}) {\\n\\n}`;\r\n    if (command.from == undefined && command.item == undefined) {\r\n        text = `for(${gap}; ${gap}; ${gap}) {\\n\\n}`;\r\n    }\r\n    else if (command.from != null && command.to != null) {\r\n        const from = toValue(command.from);\r\n        const to = toValue(command.to);\r\n        const step = command.step ? toValue(command.step) : 'i + 1';\r\n        text = `for(let i = ${from}; i < ${to}; i = ${step}) {\\n\\n}`;\r\n    }\r\n    else if (command.item != null && command.collection != null) {\r\n        const item = command.item;\r\n        const collection = toValue(command.collection);\r\n        text = `for(const ${item} of ${collection}) {\\n\\n}`;\r\n    }\r\n    const line = await editor.getLine();\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    await editor.goToLine(line._line + 1);\r\n    if (command.collection && text.includes(gap)) {\r\n        const pos = await editor.findPositionOf(gap);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\r\nexports.default = Repetition;\r\n","phrases":["repetition statement","repetition statement from [expressions] to [expressions]","repetition statement from [expressions] to [expressions] step [expressions]","repetition statement for every graph [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(run)"}},{"v":"1","w":"2","value":{"label":"(current, this)"}},{"v":"2","w":"3","value":{"label":"(file)"}}],"value":{"id":"run","label":"Run file","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Run current file","desc":"Run the current file in the terminal using node","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function run(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"run.\"');\r\n    const info = await editor.fileInfo();\r\n    return await editor.writeOnTerminal('node \"' + info.fileName + '\"');\r\n}\r\nexports.default = run;\r\n","phrases":["run current file"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"},"parent":"sg36"},{"v":"13","value":{"shape":"circle"}},{"v":"14","value":{"shape":"circle"}},{"v":"15","value":{"shape":"circle"}},{"v":"16","value":{"shape":"circle"}},{"v":"17","value":{"shape":"doublecircle"}},{"v":"18","value":{"shape":"circle"},"parent":"sg32"},{"v":"19","value":{"shape":"circle"}},{"v":"20","value":{"shape":"doublecircle"}},{"v":"sg32","value":{"shape":"circle"}},{"v":"sg36","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(select)"}},{"v":"1","w":"2","value":{"label":"(letter, symbol)"}},{"v":"18","w":"2","value":{"label":"(letter, symbol)"}},{"v":"2","w":"3","value":{"label":"({char})","store":"word"}},{"v":"1","w":"4","value":{"label":"(word)"}},{"v":"18","w":"4","value":{"label":"(word)"}},{"v":"4","w":"20","value":{"label":"([multi_word_token])","store":"word","extraArgs":"{\"case\": \"camel\"}"}},{"v":"4","w":"3","value":{"label":"({term})","store":"word"}},{"v":"1","w":"5","value":{"label":"(from)"}},{"v":"1","w":"18","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"wordPosition"}},{"v":"5","w":"13","value":{"label":"(line)","store":"selectLine"}},{"v":"13","w":"19","value":{"label":"(number)"}},{"v":"13","w":"14","value":{"label":"({number})","store":"from"}},{"v":"19","w":"14","value":{"label":"({number})","store":"from"}},{"v":"14","w":"15","value":{"label":"(to)"}},{"v":"15","w":"16","value":{"label":"(line, λ)"}},{"v":"16","w":"17","value":{"label":"({number})","store":"to"}},{"v":"5","w":"11","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"fromPosition"}},{"v":"5","w":"6","value":{"label":"(letter, symbol)"}},{"v":"11","w":"6","value":{"label":"(letter, symbol)"}},{"v":"6","w":"7","value":{"label":"({char})","store":"from"}},{"v":"7","w":"8","value":{"label":"(to)"}},{"v":"8","w":"9","value":{"label":"(letter, symbol, λ)"}},{"v":"12","w":"9","value":{"label":"(letter, symbol, λ)"}},{"v":"8","w":"12","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"toPosition"}},{"v":"9","w":"10","value":{"label":"({char})","store":"to"}}],"value":{"id":"select","label":"Select","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Select","desc":"Select a piece of the text in the current line","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function Select(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"select\"');\r\n    command.word = Array.isArray(command.word) ? command.word.join('') : command.word;\r\n    if (command.selectLine != undefined) {\r\n        return await editor.select(parseInt(command.from, 10), parseInt(command.to, 10), true);\r\n    }\r\n    else if (command.word != undefined) {\r\n        const occurences = await editor.findPositionOf(command.word);\r\n        let wordPosition = parseInt(command.wordPosition, 10) || 1;\r\n        if (wordPosition === -1)\r\n            wordPosition = occurences.length;\r\n        if (occurences.length) {\r\n            return await editor.select(occurences[wordPosition - 1][0], occurences[wordPosition - 1][1] - 1, false);\r\n        }\r\n        throw new Error('Nothing found for string: ' + command.word);\r\n    }\r\n    const from = command.from || '';\r\n    const to = command.to || '';\r\n    let fromPos = parseInt(command.fromPosition, 10) || 1;\r\n    let toPos = parseInt(command.toPosition, 10) || 1;\r\n    if (from === '' || to === '') {\r\n        throw new Error('Invalid arguments!');\r\n    }\r\n    const matchFrom = await editor.findPositionOf(from);\r\n    if (fromPos === -1)\r\n        fromPos = matchFrom.length;\r\n    const pad = matchFrom[fromPos - 1][1] || 0;\r\n    const matchTo = await editor.findPositionOf(to, undefined, pad);\r\n    if (toPos === -1)\r\n        toPos = matchTo.length;\r\n    return await editor.select(matchFrom[fromPos - 1][0], pad + matchTo[toPos - 1][0], false);\r\n}\r\nexports.default = Select;\r\n","phrases":["select symbol g","select word number","select fourth letter K","select fourth word number","select from letter g to K","select from letter K to 1ª g","select from 42ª symbol K to letter K","select from first symbol M to fourth letter g","select from line 42 to line 1","select from line number 1 to line 42","select word [multi_word_token]","select last word [multi_word_token]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(string, text)"}},{"v":"2","w":"2","value":{"label":"({any})","store":"string"}},{"v":"2","w":"4","value":{"label":"(string, text)"}}],"value":{"id":"string","label":"Writes a string","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Writes a string","desc":"Writes a string in the editor","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function WriteString(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteString\"');\r\n    command.string = Array.isArray(command.string) ? command.string : [command.string];\r\n    const text = '\"' + command.string.join(' ') + '\"';\r\n    if (command.parent)\r\n        return text;\r\n    return await editor.write(text);\r\n}\r\nexports.default = WriteString;\r\n","phrases":["string string"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new, declare, create)","store":"isNew","normalizer":"boolean"}},{"v":"0","w":"2","value":{"label":"(variable, constant)","store":"memType"}},{"v":"1","w":"2","value":{"label":"(variable, constant)","store":"memType"}},{"v":"2","w":"3","value":{"label":"(called, named)"}},{"v":"3","w":"4","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"2","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"3","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"(equals)"}},{"v":"7","w":"5","value":{"label":"(equals)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"expression"}}],"value":{"id":"variable_assignment","label":"Stores a value in a variable","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Stores a value in a variable","desc":"Stores a number, string etc in a variable","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function NewVariable(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"NewVariable\"');\r\n    let { isNew, varName, expression, memType } = command;\r\n    const value = typeof expression === 'string' ? expression : expression === null || expression === void 0 ? void 0 : expression.value;\r\n    const allocate = memType === 0 ? 'let ' : 'const ';\r\n    varName = Array.isArray(varName) ? varName.join('') : varName;\r\n    const text = `${isNew ? allocate : ''}${varName}${value ? ` = ${value}` : ''}`;\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    if (typeof expression !== 'string' && (expression === null || expression === void 0 ? void 0 : expression.value) != null) {\r\n        const pos = await editor.findPositionOf(expression.value);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nexports.default = NewVariable;\r\n","phrases":["declare constant named [multi_word_token]","constant named [multi_word_token]","new constant named [multi_word_token] equals [expressions]","declare constant named text equals [expressions]","new constant text equals [expressions]","constant named [multi_word_token] equals [expressions]","variable named text equals [expressions]","variable graph equals [expressions]","declare variable named value","create constant number","variable named number","variable temp"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(reference)"}},{"v":"0","w":"2","value":{"label":"(variable, constant)"}},{"v":"1","w":"2","value":{"label":"(variable, constant)"}},{"v":"0","w":"6","value":{"label":"(namespace)","store":"isNamespace","normalizer":"boolean"}},{"v":"1","w":"6","value":{"label":"(namespace)","store":"isNamespace","normalizer":"boolean"}},{"v":"6","w":"2","value":{"label":"(λ)"}},{"v":"2","w":"4","value":{"label":"(called)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}}],"value":{"id":"variable_reference","label":"References a variable","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"References a variable","desc":"Writes a variable or constant in the editor","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function VariableReference(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"VariableReference\"');\r\n    let { varName, parent, isNamespace = false } = command;\r\n    varName = Array.isArray(varName) ? varName : [varName];\r\n    varName = isNamespace ? varName.map(a => a[0].toUpperCase() + a.substr(1)).join('') : varName.join('');\r\n    if (parent)\r\n        return varName;\r\n    return await editor.write(varName);\r\n}\r\nexports.default = VariableReference;\r\n","phrases":["reference constant temp","reference namespace a","constant graph","namespace value","reference constant called [multi_word_token]","reference namespace called [multi_word_token]","variable called [multi_word_token]","namespace called [multi_word_token]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"},"parent":"sg52"},{"v":"10","value":{"shape":"doublecircle"}},{"v":"sg52","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(print)"}},{"v":"0","w":"2","value":{"label":"(write)"}},{"v":"2","w":"1","value":{"label":"(down, λ)"}},{"v":"2","w":"3","value":{"label":"(it)"}},{"v":"3","w":"1","value":{"label":"(down, λ)"}},{"v":"1","w":"4","value":{"label":"(space)","store":"isSpace","normalizer":"boolean"}},{"v":"1","w":"5","value":{"label":"({any})","store":"text"}},{"v":"5","w":"5","value":{"label":"({any})","store":"text"}},{"v":"1","w":"6","value":{"label":"(letter)","store":"isDitaction","normalizer":"boolean"}},{"v":"6","w":"7","value":{"label":"({char})","store":"text"}},{"v":"9","w":"7","value":{"label":"({char})","store":"text"}},{"v":"7","w":"8","value":{"label":"(and)"}},{"v":"8","w":"9","value":{"label":"(letter)"}},{"v":"1","w":"10","value":{"label":"(dot)","store":"isDot","normalizer":"boolean"}}],"value":{"id":"write","label":"Write text","lang":"en-US","langName":"English","pad":"0.2","disableStopWords":"true","rankdir":"LR","title":"Write text","desc":"Write some text in the editor","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function write(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"write.\"');\r\n    let text = null;\r\n    if (command.isSpace)\r\n        text = ' ';\r\n    else if (command.isDot)\r\n        text = '.';\r\n    else\r\n        text = Array.isArray(command.text) ? (_a = command.text) === null || _a === void 0 ? void 0 : _a.join(command.isDitaction ? '' : ' ') : command.text;\r\n    return await editor.write(text);\r\n}\r\nexports.default = write;\r\n","phrases":["print","write down","write it down","print space","write space","write it space","print who are you who are you","write down the universe is cracked the universe is cracked","write it the universe is cracked who are you","print letter M","write down letter M","write it letter K","print dot","write down dot","write it dot"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(change, switch)"}},{"v":"1","w":"2","value":{"label":"(language)"}},{"v":"2","w":"3","value":{"label":"(back)"}},{"v":"2","w":"4","value":{"label":"(portuguese)"}},{"v":"3","w":"4","value":{"label":"(portuguese)"}}],"value":{"id":"__change_lang","label":"Change input language","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Change input language","desc":"Changes input language to portuguese","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function changeLang(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"changeLang.\"');\r\n    console.log('This is an internal command this file should never run!');\r\n    return null;\r\n}\r\nexports.default = changeLang;\r\n","phrases":["switch language back portuguese","change language portuguese"]}}],"pt-BR":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(estrutura)"}},{"v":"1","w":"2","value":{"label":"(condicional)"}},{"v":"2","w":"3","value":{"label":"(se)","disableSpellcheck":"true"}},{"v":"2","w":"7","value":{"label":"([expressions])","store":"condition"}},{"v":"3","w":"7","value":{"label":"([expressions])","store":"condition"}},{"v":"3","w":"6","value":{"label":"(se)","disableSpellcheck":"true"}},{"v":"6","w":"4","value":{"label":"(não)","store":"otherwise","normalizer":"boolean","disableSpellcheck":"true"}},{"v":"3","w":"4","value":{"label":"(senão, sinal)","store":"otherwise","normalizer":"boolean","disableSpellcheck":"true"}},{"v":"4","w":"5","value":{"label":"([expressions])","store":"condition"}}],"value":{"id":"condition","label":"Estrutura condicional","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Estrutura condicional","desc":"Cria uma estrutura condicional if/else","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function Condition(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"Condition.\"');\r\n    const anything = context.templates['@anything'].examples[(_a = command === null || command === void 0 ? void 0 : command.extra) === null || _a === void 0 ? void 0 : _a.lang][0];\r\n    let { condition = anything, otherwise = false } = command;\r\n    condition = typeof condition === 'string' ? condition : condition === null || condition === void 0 ? void 0 : condition.value;\r\n    let text = `if(${condition}) {\\n\\n}${otherwise ? ' else {\\n\\n}' : ''}`;\r\n    const line = await editor.getLine();\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    await editor.goToLine(line._line + 1);\r\n    if (condition.includes(anything)) {\r\n        const pos = await editor.findPositionOf(anything);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexports.default = Condition;\r\n","phrases":["estrutura condicional","estrutura condicional se","estrutura condicional se sinal","estrutura condicional se se não","estrutura condicional se senão [expressions]","estrutura condicional se se não [expressions]","estrutura condicional se [expressions]","estrutura condicional [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg5"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg5","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, ponteiro)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"7","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalizer":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({char})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(começo, final)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(linha)"}},{"v":"1","w":"11","value":{"label":"(próximo)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(símbolo, letra)"}},{"v":"13","w":"12","value":{"label":"(símbolo, letra)"}}],"value":{"id":"cursor","label":"Mover o cursor","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Mover o cursor","desc":"Move o cursor para uma linha ou símbolo","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function cursor(args, editor, context) {\r\n    console.log('[Spoken]: Executing: \"cursor.\"');\r\n    if (args.linePosition != null) {\r\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\r\n        return await editor.moveCursorTo(pos);\r\n    }\r\n    else if (args.line) {\r\n        return await editor.goToLine(args.line);\r\n    }\r\n    else if (!args.symbol) {\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo(null, undefined, nth);\r\n    }\r\n    else {\r\n        if (args.leapSize == undefined)\r\n            args.leapSize = '1';\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\r\n    }\r\n    return await editor.moveCursorTo('BEGIN_LINE');\r\n}\r\nvar LinePostionEnum;\r\n(function (LinePostionEnum) {\r\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\r\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\r\n})(LinePostionEnum || (LinePostionEnum = {}));\r\nexports.default = cursor;\r\n","phrases":["cursor linha 42","cursor símbolo z","ponteiro 42ª letra B","ponteiro final linha","ponteiro próximo letra","cursor próximo 1 símbolo"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(expressão)"}},{"v":"1","w":"2","value":{"label":"([expressions])","store":"left"}},{"v":"2","w":"3","value":{"label":"([math_operator], [logical_operator])","store":"operation"}},{"v":"4","w":"3","value":{"label":"([math_operator], [logical_operator])","store":"operation"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"right"}}],"value":{"id":"elementar_math_op","label":"Operação Matemática Elementar","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Escreve uma operação matemática elementar","desc":"Escreve uma operação matemática elementar (*, -, +, /)","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function WriteElementarMathOperation(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteElementarMathOperation\"');\r\n    let operation = toArray(command.operation);\r\n    let right = toArray(command.right);\r\n    let text = toValue(command.left);\r\n    for (let i = 0; i < right.length; i++) {\r\n        if (operation[i].isNegative) {\r\n            if (operation[i].operator === '===')\r\n                text += ' !== ' + toValue(right[i]);\r\n            else\r\n                text = '!(' + text + ' ' + operation[i].operator + ' ' + toValue(right[i]) + ')';\r\n        }\r\n        else {\r\n            text += ' ' + operation[i].operator + ' ' + toValue(right[i]);\r\n        }\r\n    }\r\n    if (command.parent)\r\n        return text;\r\n    await editor.write(text);\r\n    const wildcard = [command.left, ...right].find(item => typeof item !== 'string');\r\n    if (wildcard) {\r\n        const pos = await editor.findPositionOf(wildcard.value);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nconst toArray = (arg) => Array.isArray(arg) ? arg : [arg];\r\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\r\nexports.default = WriteElementarMathOperation;\r\n","phrases":["expressão [expressions] [math_operator] [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"([number], [string], [variable_reference], [elementar_math_op], [function_call])","store":"expression"}},{"v":"0","w":"2","value":{"label":"(gap)","store":"wildCard","normalizer":"identity"}},{"v":"0","w":"3","value":{"label":"(falso, verdadeiro)","store":"booleanConstants"}}],"value":{"id":"expressions","label":"Escreve uma expressão","lang":"pt-BR","langName":"Português","pad":"0.2","nodesep":"1","ranksep":"2","rankdir":"LR","alias":"true","title":"Escreve uma expressão","desc":"Escreve uma expressão no editor de texto, esse automata foi projetado para ser usado em outros automatas","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function Expression(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"Expression\"');\r\n    let { expression, parent, wildCard, booleanConstants } = command;\r\n    // really ??? (fix later)\r\n    if (booleanConstants != null)\r\n        expression = booleanConstants == 1 ? 'true' : 'false';\r\n    if (parent) {\r\n        return expression ? expression : { value: wildCard, isWildCard: true };\r\n    }\r\n    return await editor.write(expression || wildCard);\r\n}\r\nexports.default = Expression;\r\n","phrases":["[string]","gap","verdadeiro"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(chame, chamar, execute)"}},{"v":"1","w":"2","value":{"label":"(função)"}},{"v":"2","w":"3","value":{"label":"([multi_word_token])","store":"functionName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"3","w":"4","value":{"label":"(λ)"}},{"v":"2","w":"4","value":{"label":"({term})","store":"functionName"}},{"v":"4","w":"11","value":{"label":"(da, na, do, no)"}},{"v":"4","w":"5","value":{"label":"([expressions])","store":"caller"}},{"v":"11","w":"5","value":{"label":"([expressions])","store":"caller"}},{"v":"4","w":"6","value":{"label":"(argumentos)"}},{"v":"5","w":"6","value":{"label":"(argumentos)"}},{"v":"6","w":"7","value":{"label":"([expressions])","store":"args"}},{"v":"7","w":"8","value":{"label":"(e)"}},{"v":"8","w":"7","value":{"label":"([expressions])","store":"args"}},{"v":"4","w":"9","value":{"label":"({number})","store":"argsNumber"}},{"v":"5","w":"9","value":{"label":"({number})","store":"argsNumber"}},{"v":"9","w":"10","value":{"label":"(argumentos)"}}],"value":{"id":"function_call","label":"Chama uma função","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","priority":"2","title":"Chama uma função","desc":"Chama uma função com os determinados argumentos no determinado caller","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function FunctionCall(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"FunctionCall\"');\r\n    const anything = context.templates['@anything'].examples[(_a = command === null || command === void 0 ? void 0 : command.extra) === null || _a === void 0 ? void 0 : _a.lang];\r\n    const functionName = join(command.functionName);\r\n    const argsNumber = command.argsNumber ? parseInt(command.argsNumber, 10) : command.oneArg ? 1 : NaN;\r\n    const args = command.args ? toArray(command.args) : [];\r\n    const caller = command.caller ? toValue(command.caller) : null;\r\n    let text = functionName + '(';\r\n    if (argsNumber) {\r\n        text += new Array(argsNumber).fill(anything).join(', ');\r\n    }\r\n    else if (args.length) {\r\n        text += (args.map(item => typeof item === 'string' ? item : anything).join(', '));\r\n    }\r\n    text += ')';\r\n    if (caller)\r\n        text = caller + '.' + text;\r\n    if (command.parent)\r\n        return text;\r\n    const line = await editor.getLine();\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    if (argsNumber > 0) {\r\n        const pos = await editor.findPositionOf(anything[0]);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nconst toArray = (arg) => Array.isArray(arg) ? arg : [arg];\r\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\r\nconst join = (item) => typeof item === 'string' ? item : item.join('');\r\nexports.default = FunctionCall;\r\n","phrases":["execute função [multi_word_token]","chamar função numero","execute função [multi_word_token] [expressions]","chamar função [multi_word_token] do [expressions]","chame função texto [expressions]","chame função temp do [expressions]","chame função [multi_word_token] [expressions] argumentos [expressions]","execute função [multi_word_token] argumentos [expressions]","chamar função [multi_word_token] na [expressions] argumentos [expressions]","chame função lista [expressions] argumentos [expressions]","chamar função texto argumentos [expressions]","chame função lista da [expressions] argumentos [expressions]","chame função [multi_word_token] [expressions] 1 argumentos","chamar função [multi_word_token] 42 argumentos","chamar função [multi_word_token] da [expressions] 42 argumentos","chamar função numero [expressions] 1 argumentos"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova, declare, crie)"}},{"v":"1","w":"2","value":{"label":"(função)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"fnName"}},{"v":"3","w":"4","value":{"label":"({number})","store":"argsNumber"}},{"v":"4","w":"5","value":{"label":"(argumentos)"}},{"v":"3","w":"6","value":{"label":"(retorna, retornando)"}},{"v":"5","w":"6","value":{"label":"(retorna, retornando)"}},{"v":"0","w":"6","value":{"label":"(retorne)","store":"returnOnly"}},{"v":"6","w":"7","value":{"label":"([expressions])","store":"returnValue"}}],"value":{"id":"function_declaration","label":"Cria uma função","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","priority":"2","title":"Cria uma função","desc":"Cria uma função com o número de argumentos especificados e um valor de retorno","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function FunctionDeclaration(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"FunctionDeclaration\"');\r\n    const anything = context.templates['@anything'].examples[(_a = command === null || command === void 0 ? void 0 : command.extra) === null || _a === void 0 ? void 0 : _a.lang];\r\n    let { fnName, argsNumber, returnValue, returnOnly } = command;\r\n    argsNumber = argsNumber != null ? parseInt(argsNumber, 10) : 0;\r\n    let text = '';\r\n    if (returnOnly == undefined) {\r\n        text = `function ${fnName}(`;\r\n        if (argsNumber > 0) {\r\n            text += new Array(argsNumber).fill(anything).join(', ');\r\n        }\r\n        text += ') {\\n';\r\n        if (returnValue != null) {\r\n            text += 'return ' + toValue(returnValue);\r\n        }\r\n        text += '\\n}';\r\n    }\r\n    else {\r\n        text = 'return ' + toValue(returnValue);\r\n    }\r\n    if (command.parent)\r\n        return text;\r\n    const line = await editor.getLine();\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    const r = await editor.goToLine(line._line + 1);\r\n    if (argsNumber > 0) {\r\n        const pos = await editor.findPositionOf(anything[0]);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return r;\r\n}\r\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\r\nexports.default = FunctionDeclaration;\r\n","phrases":["nova função a","nova função a 1 argumentos","nova função temp 42 argumentos retornando [expressions]","crie função lista retorna [expressions]","retorne [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(vá, vai)"}},{"v":"1","w":"2","value":{"label":"(para)"}},{"v":"2","w":"5","value":{"label":"(a)"}},{"v":"0","w":"3","value":{"label":"(linha)"}},{"v":"1","w":"3","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(linha)"}},{"v":"5","w":"3","value":{"label":"(linha)"}},{"v":"3","w":"6","value":{"label":"(número)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}},{"v":"6","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Trocar linha","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Trocar linha","desc":"Move or cursor para uma linha diferente","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function goToLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"goToLine.\"');\r\n    return await editor.goToLine(command.line);\r\n}\r\nexports.default = goToLine;\r\n","phrases":["vai para linha 42","vai para linha número 1","vá para a linha 1","vá para a linha número 42","vai linha 42","vá linha número 1","linha 1","linha número 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg24"},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"},"parent":"sg24"},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"sg24","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(e, ou, igual)","store":"logicalOperator"}},{"v":"2","w":"1","value":{"label":"(e, ou, igual)","store":"logicalOperator"}},{"v":"0","w":"2","value":{"label":"(não, negativo)","store":"isNegative","normalizer":"boolean"}},{"v":"0","w":"3","value":{"label":"(menor, maior)","store":"inequalityOperator","disableSpellcheck":"true"}},{"v":"2","w":"3","value":{"label":"(menor, maior)","store":"inequalityOperator","disableSpellcheck":"true"}},{"v":"3","w":"4","value":{"label":"(ou)"}},{"v":"4","w":"5","value":{"label":"(igual)","store":"orEqual","normalizer":"boolean"}},{"v":"3","w":"7","value":{"label":"(que)"}},{"v":"5","w":"7","value":{"label":"(a)"}}],"value":{"id":"logical_operator","label":"Escreve um operador lógico","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","alias":"true","title":"Escreve um operador lógico","desc":"Escreve um operador lógico (===, !==, &&, ||, >, <, >=, <=) pensando para ser usado com expressões","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function LogicalOperator(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"LogicalOperator\"');\r\n    const { logicalOperator, isNegative = false, inequalityOperator, orEqual = false } = command;\r\n    if (logicalOperator !== undefined) {\r\n        const operator = ['&&', '||', '==='][logicalOperator];\r\n        return { operator, isNegative };\r\n    }\r\n    else if (inequalityOperator !== undefined) {\r\n        const operator = ['<', '>'][inequalityOperator] + (orEqual ? '=' : '');\r\n        return { operator, isNegative };\r\n    }\r\n    return { operator: 'error', isNegative: false };\r\n}\r\nexports.default = LogicalOperator;\r\n","phrases":["ou","negativo igual","não menor ou igual","maior ou igual","não menor ou igual a","negativo maior que","maior ou igual a","menor que"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(mais, vezes, menos, dividido, módulo)","store":"mathOperator","disableSpellcheck":"true"}},{"v":"1","w":"1","value":{"label":"(por)"}}],"value":{"id":"math_operator","label":"Escreve um operador matemático","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","alias":"true","title":"Escreve uma operador matemático","desc":"Escreve um operador matemático (*, -, +, /, '%') pensando para ser usado com expressões","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function MathOperator(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"MathOperator\"');\r\n    const { mathOperator } = command;\r\n    const operator = ['+', '*', '-', '/', '%'][mathOperator] || 'error';\r\n    return { operator };\r\n}\r\n// @ts-ignore\r\nexports.default = MathOperator;\r\n","phrases":["dividido por"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"3","value":{"label":"(*)"}},{"v":"3","w":"3","value":{"label":"({any})","store":"words"}},{"v":"3","w":"4","value":{"label":"(*)"}}],"value":{"id":"multi_word_token","label":"Agrupa múltiplas palavras","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Agrupa múltiplas palavras","desc":"Agrupa múltiplas palavras juntas, projetado para ser usado dentro de outros automatas","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function MultiWordTokens(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"MultiWordTokens\"');\r\n    function camelCase(words) {\r\n        return words.map((a, i) => i ? a.charAt(0).toUpperCase() + a.slice(1) : a);\r\n    }\r\n    if (((_a = command.extra) === null || _a === void 0 ? void 0 : _a.case) === 'camel') {\r\n        return camelCase(command.words);\r\n    }\r\n    return command.words;\r\n}\r\nexports.default = MultiWordTokens;\r\n","phrases":["* *"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg29"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg31"},{"v":"5","value":{"shape":"circle"},"parent":"sg29"},{"v":"sg29","value":{"shape":"circle"}},{"v":"sg31","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova)"}},{"v":"5","w":"1","value":{"label":"(nova)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"5","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"4","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"0","w":"4","value":{"label":"(linha)"}},{"v":"0","w":"5","value":{"label":"(crie)"}},{"v":"5","w":"5","value":{"label":"(uma)"}},{"v":"4","w":"2","value":{"label":"(nova)"}}],"value":{"id":"new_line","label":"Linha nova","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Linha nova","desc":"Cria uma linha nova abaixo ou acima da linha atual","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function newLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"new line.\"');\r\n    return await editor.newLine(command.position);\r\n}\r\nexports.default = newLine;\r\n","phrases":["nova linha","linha nova","crie nova linha","crie linha","nova linha acima","linha nova acima","linha acima","crie nova linha acima","crie linha abaixo"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(número)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"number"}}],"value":{"id":"number","label":"Escreve um número","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","priority":"2","title":"Escreve um número","desc":"Escreve um número no editor","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function WriteNumber(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteNumber\"');\r\n    const { number, parent } = command;\r\n    if (parent)\r\n        return number;\r\n    return await editor.write(number);\r\n}\r\nexports.default = WriteNumber;\r\n","phrases":["número 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(remover, remova, remove)"}},{"v":"1","w":"2","value":{"label":"(linha)","store":"isLine","normalizer":"boolean"}},{"v":"1","w":"3","value":{"label":"(seleção)","store":"isSelection","normalizer":"boolean"}}],"value":{"id":"remove_ln_sec","label":"Remover","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Remover","desc":"Remove a linha atual ou a seleção","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function remove(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"remove line/selection.\"');\r\n    if (command.isLine) {\r\n        const line = await editor.getLine();\r\n        if (line instanceof Error)\r\n            throw line;\r\n        return await editor.remove(line.lineNumber);\r\n    }\r\n    else {\r\n        return await editor.write('');\r\n    }\r\n}\r\nexports.default = remove;\r\n","phrases":["remova linha","remover seleção"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"doublecircle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"circle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"}},{"v":"13","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(estrutura)"}},{"v":"1","w":"1","value":{"label":"(de)"}},{"v":"1","w":"2","value":{"label":"(repetição)"}},{"v":"2","w":"9","value":{"label":"(para)"}},{"v":"9","w":"10","value":{"label":"(todo)"}},{"v":"10","w":"11","value":{"label":"({term})","store":"item"}},{"v":"11","w":"12","value":{"label":"(de, da, do, em, λ)"}},{"v":"12","w":"13","value":{"label":"([expressions])","store":"collection"}},{"v":"2","w":"3","value":{"label":"(de, da, do, λ)"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"from"}},{"v":"4","w":"5","value":{"label":"(até)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"to"}},{"v":"6","w":"7","value":{"label":"(etapa)"}},{"v":"7","w":"8","value":{"label":"([expressions])","store":"step"}}],"value":{"id":"repetition","label":"Estrutura de repetição","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Estrutura de repetição","desc":"Cria uma estrutura de repetição for","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function Repetition(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"Repetition.\"');\r\n    const gap = context.templates['@anything'].examples[(_a = command === null || command === void 0 ? void 0 : command.extra) === null || _a === void 0 ? void 0 : _a.lang][0];\r\n    let text = `for(${gap}; ${gap}; ${gap}) {\\n\\n}`;\r\n    if (command.from == undefined && command.item == undefined) {\r\n        text = `for(${gap}; ${gap}; ${gap}) {\\n\\n}`;\r\n    }\r\n    else if (command.from != null && command.to != null) {\r\n        const from = toValue(command.from);\r\n        const to = toValue(command.to);\r\n        const step = command.step ? toValue(command.step) : 'i + 1';\r\n        text = `for(let i = ${from}; i < ${to}; i = ${step}) {\\n\\n}`;\r\n    }\r\n    else if (command.item != null && command.collection != null) {\r\n        const item = command.item;\r\n        const collection = toValue(command.collection);\r\n        text = `for(const ${item} of ${collection}) {\\n\\n}`;\r\n    }\r\n    const line = await editor.getLine();\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    await editor.goToLine(line._line + 1);\r\n    if (command.collection && text.includes(gap)) {\r\n        const pos = await editor.findPositionOf(gap);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nconst toValue = (item) => typeof item === 'string' ? item : item.value;\r\nexports.default = Repetition;\r\n","phrases":["estrutura repetição","estrutura repetição do [expressions] até [expressions]","estrutura repetição do [expressions] até [expressions] etapa [expressions]","estrutura repetição para todo lista da [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(execute, executar)"}},{"v":"1","w":"4","value":{"label":"(este)"}},{"v":"4","w":"3","value":{"label":"(arquivo)"}},{"v":"1","w":"2","value":{"label":"(arquivo)"}},{"v":"2","w":"3","value":{"label":"(atual)"}}],"value":{"id":"run","label":"Executar arquivo","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Executar arquivo","desc":"Executa o arquivo atual no terminal usando node","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function run(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"run.\"');\r\n    const info = await editor.fileInfo();\r\n    return await editor.writeOnTerminal('node \"' + info.fileName + '\"');\r\n}\r\nexports.default = run;\r\n","phrases":["execute arquivo atual","execute este arquivo"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"},"parent":"sg41"},{"v":"13","value":{"shape":"circle"}},{"v":"14","value":{"shape":"circle"}},{"v":"15","value":{"shape":"circle"}},{"v":"16","value":{"shape":"circle"}},{"v":"17","value":{"shape":"doublecircle"}},{"v":"18","value":{"shape":"circle"},"parent":"sg37"},{"v":"19","value":{"shape":"circle"}},{"v":"20","value":{"shape":"doublecircle"}},{"v":"sg37","value":{"shape":"circle"}},{"v":"sg41","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(selecione, selecionar)"}},{"v":"1","w":"2","value":{"label":"(letra, símbolo)"}},{"v":"18","w":"2","value":{"label":"(letra, símbolo)"}},{"v":"2","w":"3","value":{"label":"({char})","store":"word"}},{"v":"1","w":"4","value":{"label":"(palavra)"}},{"v":"18","w":"4","value":{"label":"(palavra)"}},{"v":"4","w":"20","value":{"label":"([multi_word_token])","store":"word","extraArgs":"{\"case\": \"camel\"}"}},{"v":"4","w":"3","value":{"label":"({term})","store":"word"}},{"v":"1","w":"5","value":{"label":"(de, da)"}},{"v":"1","w":"18","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"wordPosition"}},{"v":"5","w":"13","value":{"label":"(linha)","store":"selectLine"}},{"v":"13","w":"19","value":{"label":"(número)"}},{"v":"13","w":"14","value":{"label":"({number})","store":"from"}},{"v":"19","w":"14","value":{"label":"({number})","store":"from"}},{"v":"14","w":"15","value":{"label":"(até)"}},{"v":"15","w":"16","value":{"label":"(linha, λ)"}},{"v":"16","w":"17","value":{"label":"({number})","store":"to"}},{"v":"5","w":"11","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"fromPosition"}},{"v":"5","w":"6","value":{"label":"(letra, símbolo)"}},{"v":"11","w":"6","value":{"label":"(letra, símbolo)"}},{"v":"6","w":"7","value":{"label":"({char})","store":"from"}},{"v":"7","w":"8","value":{"label":"(até)"}},{"v":"8","w":"9","value":{"label":"(letra, símbolo, λ)"}},{"v":"12","w":"9","value":{"label":"(letra, símbolo, λ)"}},{"v":"8","w":"12","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"toPosition"}},{"v":"9","w":"10","value":{"label":"({char})","store":"to"}}],"value":{"id":"select","label":"Selecionar","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Selecionar","desc":"Seleciona um pedaço de texto na linha atual","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function Select(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"select\"');\r\n    command.word = Array.isArray(command.word) ? command.word.join('') : command.word;\r\n    if (command.selectLine != undefined) {\r\n        return await editor.select(parseInt(command.from, 10), parseInt(command.to, 10), true);\r\n    }\r\n    else if (command.word != undefined) {\r\n        const occurences = await editor.findPositionOf(command.word);\r\n        let wordPosition = parseInt(command.wordPosition, 10) || 1;\r\n        if (wordPosition === -1)\r\n            wordPosition = occurences.length;\r\n        if (occurences.length) {\r\n            return await editor.select(occurences[wordPosition - 1][0], occurences[wordPosition - 1][1] - 1, false);\r\n        }\r\n        throw new Error('Nothing found for string: ' + command.word);\r\n    }\r\n    const from = command.from || '';\r\n    const to = command.to || '';\r\n    let fromPos = parseInt(command.fromPosition, 10) || 1;\r\n    let toPos = parseInt(command.toPosition, 10) || 1;\r\n    if (from === '' || to === '') {\r\n        throw new Error('Invalid arguments!');\r\n    }\r\n    const matchFrom = await editor.findPositionOf(from);\r\n    if (fromPos === -1)\r\n        fromPos = matchFrom.length;\r\n    const pad = matchFrom[fromPos - 1][1] || 0;\r\n    const matchTo = await editor.findPositionOf(to, undefined, pad);\r\n    if (toPos === -1)\r\n        toPos = matchTo.length;\r\n    return await editor.select(matchFrom[fromPos - 1][0], pad + matchTo[toPos - 1][0], false);\r\n}\r\nexports.default = Select;\r\n","phrases":["selecione letra B","selecionar palavra a","selecionar 42ª símbolo B","selecionar 42ª palavra numero","selecionar da letra a até B","selecione de símbolo B até 1ª a","selecionar da 42ª letra B até letra B","selecionar da sétimo letra A até 1ª símbolo a","selecionar de linha 1 até 42","selecione de linha número 42 até linha 1","selecionar palavra [multi_word_token]","selecione 1ª palavra [multi_word_token]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(string, text)"}},{"v":"2","w":"2","value":{"label":"({any})","store":"string"}},{"v":"2","w":"4","value":{"label":"(string, text)"}}],"value":{"id":"string","label":"Escreve uma string","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Escreve uma string","desc":"Escreve uma string no editor","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function WriteString(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteString\"');\r\n    command.string = Array.isArray(command.string) ? command.string : [command.string];\r\n    const text = '\"' + command.string.join(' ') + '\"';\r\n    if (command.parent)\r\n        return text;\r\n    return await editor.write(text);\r\n}\r\nexports.default = WriteString;\r\n","phrases":["text string"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova, declare, crie)","store":"isNew","normalizer":"boolean"}},{"v":"0","w":"2","value":{"label":"(variável, constante)","store":"memType"}},{"v":"1","w":"2","value":{"label":"(variável, constante)","store":"memType"}},{"v":"2","w":"3","value":{"label":"(chamada)"}},{"v":"3","w":"4","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"2","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"3","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"(igual)"}},{"v":"7","w":"5","value":{"label":"(igual)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"expression"}}],"value":{"id":"variable_assignment","label":"Guarda um valor em uma variável","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Guarda um valor em uma variável","desc":"Guarda um valor, inteiro, texto e etc em uma variável","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function NewVariable(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"NewVariable\"');\r\n    let { isNew, varName, expression, memType } = command;\r\n    const value = typeof expression === 'string' ? expression : expression === null || expression === void 0 ? void 0 : expression.value;\r\n    const allocate = memType === 0 ? 'let ' : 'const ';\r\n    varName = Array.isArray(varName) ? varName.join('') : varName;\r\n    const text = `${isNew ? allocate : ''}${varName}${value ? ` = ${value}` : ''}`;\r\n    await editor.write(text);\r\n    await editor.indentSelection();\r\n    if (typeof expression !== 'string' && (expression === null || expression === void 0 ? void 0 : expression.value) != null) {\r\n        const pos = await editor.findPositionOf(expression.value);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nexports.default = NewVariable;\r\n","phrases":["nova constante chamada [multi_word_token]","constante chamada [multi_word_token]","crie constante chamada [multi_word_token] igual [expressions]","crie constante chamada temp igual [expressions]","declare constante temp igual [expressions]","constante chamada [multi_word_token] igual [expressions]","constante chamada lista igual [expressions]","variável valor igual [expressions]","crie constante chamada valor","crie constante texto","variável chamada texto","constante valor"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(referência, refira)"}},{"v":"0","w":"2","value":{"label":"(variável, constante)"}},{"v":"1","w":"2","value":{"label":"(variável, constante)"}},{"v":"0","w":"6","value":{"label":"(namespace)","store":"isNamespace","normalizer":"boolean"}},{"v":"1","w":"6","value":{"label":"(namespace)","store":"isNamespace","normalizer":"boolean"}},{"v":"6","w":"2","value":{"label":"(λ)"}},{"v":"2","w":"4","value":{"label":"(chamada)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}}],"value":{"id":"variable_reference","label":"Referencia a uma variável","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Referencia a uma variável","desc":"Refere a uma variável ou constante já declarada","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function VariableReference(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"VariableReference\"');\r\n    let { varName, parent, isNamespace = false } = command;\r\n    varName = Array.isArray(varName) ? varName : [varName];\r\n    varName = isNamespace ? varName.map(a => a[0].toUpperCase() + a.substr(1)).join('') : varName.join('');\r\n    if (parent)\r\n        return varName;\r\n    return await editor.write(varName);\r\n}\r\nexports.default = VariableReference;\r\n","phrases":["referência constante texto","referência namespace a","constante texto","namespace texto","referência variável chamada [multi_word_token]","refira namespace chamada [multi_word_token]","variável chamada [multi_word_token]","namespace chamada [multi_word_token]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"doublecircle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"},"parent":"sg53"},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"sg53","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(escreva)"}},{"v":"1","w":"3","value":{"label":"({any})","store":"text"}},{"v":"1","w":"2","value":{"label":"(espaço)","store":"isSpace","normalizer":"boolean"}},{"v":"3","w":"3","value":{"label":"({any})","store":"text"}},{"v":"1","w":"11","value":{"label":"(a)"}},{"v":"11","w":"6","value":{"label":"(letra)","store":"isDitaction","normalizer":"boolean"}},{"v":"6","w":"7","value":{"label":"({char})","store":"text"}},{"v":"9","w":"7","value":{"label":"({char})","store":"text"}},{"v":"7","w":"8","value":{"label":"(e, i)"}},{"v":"8","w":"9","value":{"label":"(letra)"}},{"v":"1","w":"10","value":{"label":"(ponto)","store":"isDot","normalizer":"boolean"}}],"value":{"id":"write","label":"Escrever texto","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Escrever texto","desc":"Escreve um pedaço de texto no editor de texto","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function write(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"write.\"');\r\n    let text = null;\r\n    if (command.isSpace)\r\n        text = ' ';\r\n    else if (command.isDot)\r\n        text = '.';\r\n    else\r\n        text = Array.isArray(command.text) ? (_a = command.text) === null || _a === void 0 ? void 0 : _a.join(command.isDitaction ? '' : ' ') : command.text;\r\n    return await editor.write(text);\r\n}\r\nexports.default = write;\r\n","phrases":["escreva","escreva espaço","escreva isto é um teste isto é um teste","escreva a letra a","escreva ponto"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(troque, trocar, mude, mudar)"}},{"v":"1","w":"2","value":{"label":"(linguagem)"}},{"v":"2","w":"4","value":{"label":"(inglês)"}}],"value":{"id":"__change_lang","label":"Mudar linguagem de entrada","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Mudar linguagem de entrada","desc":"Mudar linguagem de entrada para inglês","impl":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nasync function changeLang(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"changeLang.\"');\r\n    console.log('This is an internal command this file should never run!');\r\n    return null;\r\n}\r\nexports.default = changeLang;\r\n","phrases":["mude linguagem inglês"]}}]},"desc":"Collection of voice commands of the typescript language","label":"Typescript voice commands"}]}